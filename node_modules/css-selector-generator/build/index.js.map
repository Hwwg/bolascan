{"version":3,"file":"index.js","mappings":"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","sources":["webpack://CssSelectorGenerator/webpack/universalModuleDefinition","webpack://CssSelectorGenerator/webpack/bootstrap","webpack://CssSelectorGenerator/webpack/runtime/define property getters","webpack://CssSelectorGenerator/webpack/runtime/hasOwnProperty shorthand","webpack://CssSelectorGenerator/webpack/runtime/make namespace object","webpack://CssSelectorGenerator/./temp/utilities-iselement.js","webpack://CssSelectorGenerator/./temp/types.js","webpack://CssSelectorGenerator/./temp/utilities-messages.js","webpack://CssSelectorGenerator/./temp/utilities-options.js","webpack://CssSelectorGenerator/./temp/utilities-data.js","webpack://CssSelectorGenerator/./temp/utilities-dom.js","webpack://CssSelectorGenerator/./temp/constants.js","webpack://CssSelectorGenerator/./temp/selector-attribute.js","webpack://CssSelectorGenerator/./temp/selector-class.js","webpack://CssSelectorGenerator/./temp/selector-id.js","webpack://CssSelectorGenerator/./temp/selector-nth-child.js","webpack://CssSelectorGenerator/./temp/selector-tag.js","webpack://CssSelectorGenerator/./temp/selector-nth-of-type.js","webpack://CssSelectorGenerator/./temp/utilities-powerset.js","webpack://CssSelectorGenerator/./temp/utilities-selectors.js","webpack://CssSelectorGenerator/./temp/utilities-cartesian.js","webpack://CssSelectorGenerator/./temp/utilities-element-data.js","webpack://CssSelectorGenerator/./temp/selector-fallback.js","webpack://CssSelectorGenerator/./temp/index.js","webpack://CssSelectorGenerator/./temp/utilities-typescript.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CssSelectorGenerator\"] = factory();\n\telse\n\t\troot[\"CssSelectorGenerator\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Guard function that checks if provided `input` is an Element.\n */\nexport function isElement(input) {\n    return (typeof input === \"object\" &&\n        input !== null &&\n        input.nodeType === Node.ELEMENT_NODE);\n}\n//# sourceMappingURL=utilities-iselement.js.map","export const OPERATOR = {\n    NONE: \"\",\n    DESCENDANT: \" \",\n    CHILD: \" > \",\n};\nexport const CSS_SELECTOR_TYPE = {\n    id: \"id\",\n    class: \"class\",\n    tag: \"tag\",\n    attribute: \"attribute\",\n    nthchild: \"nthchild\",\n    nthoftype: \"nthoftype\",\n};\n//# sourceMappingURL=types.js.map","const libraryName = \"CssSelectorGenerator\";\n/**\n * Convenient wrapper for `console.warn` using consistent formatting.\n */\nexport function showWarning(id = \"unknown problem\", ...args) {\n    // eslint-disable-next-line no-console\n    console.warn(`${libraryName}: ${id}`, ...args);\n}\n//# sourceMappingURL=utilities-messages.js.map","import { CSS_SELECTOR_TYPE, } from \"./types.js\";\nimport { getRootNode } from \"./utilities-dom.js\";\nimport { isEnumValue } from \"./utilities-typescript.js\";\nimport { showWarning } from \"./utilities-messages.js\";\nexport const DEFAULT_OPTIONS = {\n    selectors: [\n        CSS_SELECTOR_TYPE.id,\n        CSS_SELECTOR_TYPE.class,\n        CSS_SELECTOR_TYPE.tag,\n        CSS_SELECTOR_TYPE.attribute,\n    ],\n    // if set to true, always include tag name\n    includeTag: false,\n    whitelist: [],\n    blacklist: [],\n    combineWithinSelector: true,\n    combineBetweenSelectors: true,\n    root: null,\n    maxCombinations: Number.POSITIVE_INFINITY,\n    maxCandidates: Number.POSITIVE_INFINITY,\n};\n/**\n * Makes sure returned value is a list containing only valid selector types.\n * @param input\n */\nexport function sanitizeSelectorTypes(input) {\n    if (!Array.isArray(input)) {\n        return [];\n    }\n    return input.filter((item) => isEnumValue(CSS_SELECTOR_TYPE, item));\n}\n/**\n * Checks whether provided value is of type RegExp.\n */\nexport function isRegExp(input) {\n    return input instanceof RegExp;\n}\n/**\n * Checks whether provided value is usable in whitelist or blacklist.\n * @param input\n */\nexport function isCssSelectorMatch(input) {\n    return [\"string\", \"function\"].includes(typeof input) || isRegExp(input);\n}\n/**\n * Converts input to a list of valid values for whitelist or blacklist.\n */\nexport function sanitizeCssSelectorMatchList(input) {\n    if (!Array.isArray(input)) {\n        return [];\n    }\n    return input.filter(isCssSelectorMatch);\n}\n/**\n * Checks whether provided value is valid Node.\n */\nexport function isNode(input) {\n    return input instanceof Node;\n}\n/**\n * Checks whether provided value is valid ParentNode.\n */\nexport function isParentNode(input) {\n    const validParentNodeTypes = [\n        Node.DOCUMENT_NODE,\n        Node.DOCUMENT_FRAGMENT_NODE, // this includes Shadow DOM root\n        Node.ELEMENT_NODE,\n    ];\n    return isNode(input) && validParentNodeTypes.includes(input.nodeType);\n}\n/**\n * Makes sure that the root node in options is valid.\n */\nexport function sanitizeRoot(input, element) {\n    if (isParentNode(input)) {\n        if (!input.contains(element)) {\n            showWarning(\"element root mismatch\", \"Provided root does not contain the element. This will most likely result in producing a fallback selector using element's real root node. If you plan to use the selector using provided root (e.g. `root.querySelector`), it will not work as intended.\");\n        }\n        return input;\n    }\n    const rootNode = element.getRootNode({ composed: false });\n    if (isParentNode(rootNode)) {\n        if (rootNode !== document) {\n            showWarning(\"shadow root inferred\", \"You did not provide a root and the element is a child of Shadow DOM. This will produce a selector using ShadowRoot as a root. If you plan to use the selector using document as a root (e.g. `document.querySelector`), it will not work as intended.\");\n        }\n        return rootNode;\n    }\n    return getRootNode(element);\n}\n/**\n * Makes sure that the output is a number, usable as `maxResults` option in\n * powerset generator.\n */\nexport function sanitizeMaxNumber(input) {\n    return typeof input === \"number\" ? input : Number.POSITIVE_INFINITY;\n}\n/**\n * Makes sure the options object contains all required keys.\n */\nexport function sanitizeOptions(element, custom_options = {}) {\n    const options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), custom_options);\n    return {\n        selectors: sanitizeSelectorTypes(options.selectors),\n        whitelist: sanitizeCssSelectorMatchList(options.whitelist),\n        blacklist: sanitizeCssSelectorMatchList(options.blacklist),\n        root: sanitizeRoot(options.root, element),\n        combineWithinSelector: !!options.combineWithinSelector,\n        combineBetweenSelectors: !!options.combineBetweenSelectors,\n        includeTag: !!options.includeTag,\n        maxCombinations: sanitizeMaxNumber(options.maxCombinations),\n        maxCandidates: sanitizeMaxNumber(options.maxCandidates),\n    };\n}\n//# sourceMappingURL=utilities-options.js.map","import { isRegExp } from \"./utilities-options.js\";\nimport { showWarning } from \"./utilities-messages.js\";\n/**\n * Creates array containing only items included in all input arrays.\n */\nexport function getIntersection(items = []) {\n    const [firstItem = [], ...otherItems] = items;\n    if (otherItems.length === 0) {\n        return firstItem;\n    }\n    return otherItems.reduce((accumulator, currentValue) => {\n        return accumulator.filter((item) => currentValue.includes(item));\n    }, firstItem);\n}\n/**\n * Converts array of arrays into a flat array.\n */\nexport function flattenArray(input) {\n    return [].concat(...input);\n}\n/**\n * Convert string that can contain wildcards (asterisks) to RegExp source.\n */\nexport function wildcardToRegExp(input) {\n    return (input\n        // convert all special characters used by RegExp, except an asterisk\n        .replace(/[|\\\\{}()[\\]^$+?.]/g, \"\\\\$&\")\n        // convert asterisk to pattern that matches anything\n        .replace(/\\*/g, \".+\"));\n}\n/**\n * Creates function that will test list of provided matchers against input.\n * Used for white/blacklist functionality.\n */\nexport function createPatternMatcher(list) {\n    const matchFunctions = list.map((item) => {\n        if (isRegExp(item)) {\n            return (input) => item.test(input);\n        }\n        if (typeof item === \"function\") {\n            return (input) => {\n                const result = item(input);\n                if (typeof result !== \"boolean\") {\n                    showWarning(\"pattern matcher function invalid\", \"Provided pattern matching function does not return boolean. It's result will be ignored.\", item);\n                    return false;\n                }\n                return result;\n            };\n        }\n        if (typeof item === \"string\") {\n            const re = new RegExp(\"^\" + wildcardToRegExp(item) + \"$\");\n            return (input) => re.test(input);\n        }\n        showWarning(\"pattern matcher invalid\", \"Pattern matching only accepts strings, regular expressions and/or functions. This item is invalid and will be ignored.\", item);\n        return () => false;\n    });\n    return (input) => matchFunctions.some((matchFunction) => matchFunction(input));\n}\n//# sourceMappingURL=utilities-data.js.map","import { isElement } from \"./utilities-iselement.js\";\nimport { getIntersection } from \"./utilities-data.js\";\nimport { sanitizeRoot } from \"./utilities-options.js\";\n/**\n * Check whether element is matched uniquely by selector.\n */\nexport function testSelector(elements, selector, root) {\n    const result = Array.from(sanitizeRoot(root, elements[0]).querySelectorAll(selector));\n    return (result.length === elements.length &&\n        elements.every((element) => result.includes(element)));\n}\n/**\n * Test whether selector targets element. It does not have to be a unique match.\n */\nexport function testMultiSelector(element, selector, root) {\n    const result = Array.from(sanitizeRoot(root, element).querySelectorAll(selector));\n    return result.includes(element);\n}\n/**\n * Find all parents of a single element.\n */\nexport function getElementParents(element, root) {\n    root = root !== null && root !== void 0 ? root : getRootNode(element);\n    const result = [];\n    let parent = element;\n    while (isElement(parent) && parent !== root) {\n        result.push(parent);\n        parent = parent.parentElement;\n    }\n    return result;\n}\n/**\n * Find all common parents of elements.\n */\nexport function getParents(elements, root) {\n    return getIntersection(elements.map((element) => getElementParents(element, root)));\n}\n/**\n * Returns root node for given element. This needs to be used because of document-less environments, e.g. jsdom.\n */\nexport function getRootNode(element) {\n    // The `:root` selector always returns a parent node. The `null` return value is not applicable here.\n    return element.ownerDocument.querySelector(\":root\");\n}\n//# sourceMappingURL=utilities-dom.js.map","import { CSS_SELECTOR_TYPE } from \"./types.js\";\nexport const SELECTOR_SEPARATOR = \", \";\n// RegExp that will match invalid patterns that can be used in ID attribute.\nexport const INVALID_ID_RE = new RegExp([\n    \"^$\", // empty or not set\n    \"\\\\s\", // contains whitespace\n].join(\"|\"));\n// RegExp that will match invalid patterns that can be used in class attribute.\nexport const INVALID_CLASS_RE = new RegExp([\n    \"^$\", // empty or not set\n].join(\"|\"));\n// Order in which a combined selector is constructed.\nexport const SELECTOR_PATTERN = [\n    CSS_SELECTOR_TYPE.nthoftype,\n    CSS_SELECTOR_TYPE.tag,\n    CSS_SELECTOR_TYPE.id,\n    CSS_SELECTOR_TYPE.class,\n    CSS_SELECTOR_TYPE.attribute,\n    CSS_SELECTOR_TYPE.nthchild,\n];\n//# sourceMappingURL=constants.js.map","import { sanitizeSelectorItem } from \"./utilities-selectors.js\";\nimport { createPatternMatcher, getIntersection } from \"./utilities-data.js\";\n// List of attributes to be ignored. These are handled by different selector types.\nexport const attributeBlacklistMatch = createPatternMatcher([\n    \"class\",\n    \"id\",\n    // Angular attributes\n    \"ng-*\",\n]);\n/**\n * Get simplified attribute selector for an element.\n */\nexport function attributeNodeToSimplifiedSelector({ name, }) {\n    return `[${name}]`;\n}\n/**\n * Get attribute selector for an element.\n */\nexport function attributeNodeToSelector({ name, value, }) {\n    return `[${name}='${value}']`;\n}\n/**\n * Checks whether an attribute should be used as a selector.\n */\nexport function isValidAttributeNode({ nodeName, nodeValue }, element) {\n    // form input value should not be used as a selector\n    const tagName = element.tagName.toLowerCase();\n    if ([\"input\", \"option\"].includes(tagName) && nodeName === \"value\") {\n        return false;\n    }\n    // ignore Base64-encoded strings as 'src' attribute values (e.g. in tags like img, audio, video, iframe, object, embed).\n    if (nodeName === \"src\" && (nodeValue === null || nodeValue === void 0 ? void 0 : nodeValue.startsWith(\"data:\"))) {\n        return false;\n    }\n    return !attributeBlacklistMatch(nodeName);\n}\n/**\n * Sanitize all attribute data. We want to do it once, before we start to generate simplified/full selectors from the same data.\n */\nfunction sanitizeAttributeData({ nodeName, nodeValue }) {\n    return {\n        name: sanitizeSelectorItem(nodeName),\n        value: sanitizeSelectorItem(nodeValue !== null && nodeValue !== void 0 ? nodeValue : undefined),\n    };\n}\n/**\n * Get attribute selectors for an element.\n */\nexport function getElementAttributeSelectors(element) {\n    const validAttributes = Array.from(element.attributes)\n        .filter((attributeNode) => isValidAttributeNode(attributeNode, element))\n        .map(sanitizeAttributeData);\n    return [\n        ...validAttributes.map(attributeNodeToSimplifiedSelector),\n        ...validAttributes.map(attributeNodeToSelector),\n    ];\n}\n/**\n * Get attribute selectors matching all elements.\n */\nexport function getAttributeSelectors(elements) {\n    const elementSelectors = elements.map(getElementAttributeSelectors);\n    return getIntersection(elementSelectors);\n}\n//# sourceMappingURL=selector-attribute.js.map","import { sanitizeSelectorItem } from \"./utilities-selectors.js\";\nimport { INVALID_CLASS_RE } from \"./constants.js\";\nimport { getIntersection } from \"./utilities-data.js\";\n/**\n * Get class selectors for an element.\n */\nexport function getElementClassSelectors(element) {\n    var _a;\n    return ((_a = element.getAttribute(\"class\")) !== null && _a !== void 0 ? _a : \"\")\n        .trim()\n        .split(/\\s+/)\n        .filter((item) => !INVALID_CLASS_RE.test(item))\n        .map((item) => `.${sanitizeSelectorItem(item)}`);\n}\n/**\n * Get class selectors matching all elements.\n */\nexport function getClassSelectors(elements) {\n    const elementSelectors = elements.map(getElementClassSelectors);\n    return getIntersection(elementSelectors);\n}\n//# sourceMappingURL=selector-class.js.map","import { sanitizeSelectorItem } from \"./utilities-selectors.js\";\nimport { INVALID_ID_RE } from \"./constants.js\";\nimport { testSelector } from \"./utilities-dom.js\";\n/**\n * Get ID selector for an element.\n * */\nexport function getElementIdSelectors(element) {\n    var _a;\n    const id = (_a = element.getAttribute(\"id\")) !== null && _a !== void 0 ? _a : \"\";\n    const selector = `#${sanitizeSelectorItem(id)}`;\n    const rootNode = element.getRootNode({ composed: false });\n    return !INVALID_ID_RE.test(id) && testSelector([element], selector, rootNode)\n        ? [selector]\n        : [];\n}\n/**\n * Get ID selector for an element.\n */\nexport function getIdSelector(elements) {\n    return elements.length === 0 || elements.length > 1\n        ? []\n        : getElementIdSelectors(elements[0]);\n}\n//# sourceMappingURL=selector-id.js.map","import { isElement } from \"./utilities-iselement.js\";\nimport { getIntersection } from \"./utilities-data.js\";\n/**\n * Get nth-child selector for an element.\n */\nexport function getElementNthChildSelector(element) {\n    const parent = element.parentNode;\n    if (parent) {\n        const siblings = Array.from(parent.childNodes).filter(isElement);\n        const elementIndex = siblings.indexOf(element);\n        if (elementIndex > -1) {\n            return [\n                `:nth-child(${String(elementIndex + 1)})`,\n            ];\n        }\n    }\n    return [];\n}\n/**\n * Get nth-child selector matching all elements.\n */\nexport function getNthChildSelector(elements) {\n    return getIntersection(elements.map(getElementNthChildSelector));\n}\n//# sourceMappingURL=selector-nth-child.js.map","import { sanitizeSelectorItem } from \"./utilities-selectors.js\";\nimport { flattenArray } from \"./utilities-data.js\";\n/**\n * Get tag selector for an element.\n */\nexport function getElementTagSelectors(element) {\n    return [\n        sanitizeSelectorItem(element.tagName.toLowerCase()),\n    ];\n}\n/**\n * Get tag selector for list of elements.\n */\nexport function getTagSelector(elements) {\n    const selectors = [\n        ...new Set(flattenArray(elements.map(getElementTagSelectors))),\n    ];\n    return selectors.length === 0 || selectors.length > 1 ? [] : [selectors[0]];\n}\n//# sourceMappingURL=selector-tag.js.map","import { getTagSelector } from \"./selector-tag.js\";\nimport { getIntersection } from \"./utilities-data.js\";\n/**\n * Get nth-of-type selector for an element.\n */\nexport function getElementNthOfTypeSelector(element) {\n    const tag = getTagSelector([element])[0];\n    const parentElement = element.parentElement;\n    if (parentElement) {\n        const siblings = Array.from(parentElement.children).filter((element) => element.tagName.toLowerCase() === tag);\n        const elementIndex = siblings.indexOf(element);\n        if (elementIndex > -1) {\n            return [\n                `${tag}:nth-of-type(${String(elementIndex + 1)})`,\n            ];\n        }\n    }\n    return [];\n}\n/**\n * Get Nth-of-type selector matching all elements.\n */\nexport function getNthOfTypeSelector(elements) {\n    return getIntersection(elements.map(getElementNthOfTypeSelector));\n}\n//# sourceMappingURL=selector-nth-of-type.js.map","export function* powerSetGenerator(input = [], { maxResults = Number.POSITIVE_INFINITY } = {}) {\n    let resultCounter = 0;\n    let offsets = generateOffsets(1);\n    while (offsets.length <= input.length && resultCounter < maxResults) {\n        resultCounter += 1;\n        const result = offsets.map((offset) => input[offset]);\n        yield result;\n        offsets = bumpOffsets(offsets, input.length - 1);\n    }\n}\n/**\n * Generates power set of input items.\n */\nexport function getPowerSet(input = [], { maxResults = Number.POSITIVE_INFINITY } = {}) {\n    return Array.from(powerSetGenerator(input, { maxResults }));\n}\n/**\n * Helper function used by `getPowerSet`. Updates internal pointers.\n */\nfunction bumpOffsets(offsets = [], maxValue = 0) {\n    const size = offsets.length;\n    if (size === 0) {\n        return [];\n    }\n    const result = [...offsets];\n    result[size - 1] += 1;\n    for (let index = size - 1; index >= 0; index--) {\n        if (result[index] > maxValue) {\n            if (index === 0) {\n                return generateOffsets(size + 1);\n            }\n            else {\n                result[index - 1]++;\n                result[index] = result[index - 1] + 1;\n            }\n        }\n    }\n    if (result[size - 1] > maxValue) {\n        return generateOffsets(size + 1);\n    }\n    return result;\n}\n/**\n * Generates array of size N, filled with numbers sequence starting from 0.\n */\nfunction generateOffsets(size = 1) {\n    return Array.from(Array(size).keys());\n}\n//# sourceMappingURL=utilities-powerset.js.map","import { SELECTOR_PATTERN } from \"./constants.js\";\nimport { getAttributeSelectors, getElementAttributeSelectors, } from \"./selector-attribute.js\";\nimport { getClassSelectors, getElementClassSelectors, } from \"./selector-class.js\";\nimport { getElementIdSelectors, getIdSelector } from \"./selector-id.js\";\nimport { getElementNthChildSelector, getNthChildSelector, } from \"./selector-nth-child.js\";\nimport { getElementNthOfTypeSelector, getNthOfTypeSelector, } from \"./selector-nth-of-type.js\";\nimport { getElementTagSelectors, getTagSelector } from \"./selector-tag.js\";\nimport { createPatternMatcher, flattenArray } from \"./utilities-data.js\";\nimport { getParents, testSelector } from \"./utilities-dom.js\";\nimport { CSS_SELECTOR_TYPE, OPERATOR, } from \"./types.js\";\nimport { isElement } from \"./utilities-iselement.js\";\nimport { getPowerSet } from \"./utilities-powerset.js\";\nimport { getCartesianProduct } from \"./utilities-cartesian.js\";\nexport const ESCAPED_COLON = \":\".charCodeAt(0).toString(16).toUpperCase();\n// Square brackets need to be escaped, but eslint has a problem with that.\n/* eslint-disable-next-line no-useless-escape */\nexport const SPECIAL_CHARACTERS_RE = /[ !\"#$%&'()\\[\\]{|}<>*+,./;=?@^`~\\\\]/;\n/**\n * Escapes special characters used by CSS selector items.\n */\nexport function sanitizeSelectorItem(input = \"\") {\n    // This should not be necessary, but just to be sure, let's keep the legacy sanitizer in place, for backwards compatibility.\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return CSS ? CSS.escape(input) : legacySanitizeSelectorItem(input);\n}\n/**\n * Legacy version of escaping utility, originally used for IE11-. Should\n * probably be replaced by a polyfill:\n * https://github.com/mathiasbynens/CSS.escape\n */\nexport function legacySanitizeSelectorItem(input = \"\") {\n    return input\n        .split(\"\")\n        .map((character) => {\n        if (character === \":\") {\n            return `\\\\${ESCAPED_COLON} `;\n        }\n        if (SPECIAL_CHARACTERS_RE.test(character)) {\n            return `\\\\${character}`;\n        }\n        // needed for backwards compatibility\n        // eslint-disable-next-line @typescript-eslint/no-deprecated\n        return escape(character).replace(/%/g, \"\\\\\");\n    })\n        .join(\"\");\n}\nexport const SELECTOR_TYPE_GETTERS = {\n    tag: getTagSelector,\n    id: getIdSelector,\n    class: getClassSelectors,\n    attribute: getAttributeSelectors,\n    nthchild: getNthChildSelector,\n    nthoftype: getNthOfTypeSelector,\n};\nexport const ELEMENT_SELECTOR_TYPE_GETTERS = {\n    tag: getElementTagSelectors,\n    id: getElementIdSelectors,\n    class: getElementClassSelectors,\n    attribute: getElementAttributeSelectors,\n    nthchild: getElementNthChildSelector,\n    nthoftype: getElementNthOfTypeSelector,\n};\n/**\n * Creates selector of given type for single element.\n */\nexport function getElementSelectorsByType(element, selectorType) {\n    return ELEMENT_SELECTOR_TYPE_GETTERS[selectorType](element);\n}\n/**\n * Returns list of selectors of given type for the element.\n */\nexport function getSelectorsByType(elements, selector_type) {\n    const getter = SELECTOR_TYPE_GETTERS[selector_type];\n    return getter(elements);\n}\n/**\n * Remove blacklisted selectors from list.\n */\nexport function filterSelectors(list = [], matchBlacklist, matchWhitelist) {\n    return list.filter((item) => matchWhitelist(item) || !matchBlacklist(item));\n}\n/**\n * Prioritise whitelisted selectors in list.\n */\nexport function orderSelectors(list = [], matchWhitelist) {\n    return list.sort((a, b) => {\n        const a_is_whitelisted = matchWhitelist(a);\n        const b_is_whitelisted = matchWhitelist(b);\n        if (a_is_whitelisted && !b_is_whitelisted) {\n            return -1;\n        }\n        if (!a_is_whitelisted && b_is_whitelisted) {\n            return 1;\n        }\n        return 0;\n    });\n}\n/**\n * Returns list of unique selectors applicable to given element.\n */\nexport function getAllSelectors(elements, root, options) {\n    const selectors_list = getSelectorsList(elements, options);\n    const type_combinations = getTypeCombinations(selectors_list, options);\n    const all_selectors = flattenArray(type_combinations);\n    return [...new Set(all_selectors)];\n}\n/**\n * Creates object containing all selector types and their potential values.\n */\nexport function getSelectorsList(elements, options) {\n    const { blacklist, whitelist, combineWithinSelector, maxCombinations } = options;\n    const matchBlacklist = createPatternMatcher(blacklist);\n    const matchWhitelist = createPatternMatcher(whitelist);\n    const reducer = (data, selector_type) => {\n        const selectors_by_type = getSelectorsByType(elements, selector_type);\n        const filtered_selectors = filterSelectors(selectors_by_type, matchBlacklist, matchWhitelist);\n        const found_selectors = orderSelectors(filtered_selectors, matchWhitelist);\n        data[selector_type] = combineWithinSelector\n            ? getPowerSet(found_selectors, { maxResults: maxCombinations })\n            : found_selectors.map((item) => [item]);\n        return data;\n    };\n    return getSelectorsToGet(options).reduce(reducer, {});\n}\n/**\n * Creates list of selector types that we will need to generate the selector.\n */\nexport function getSelectorsToGet(options) {\n    const { selectors, includeTag } = options;\n    const selectors_to_get = [...selectors];\n    if (includeTag && !selectors_to_get.includes(\"tag\")) {\n        selectors_to_get.push(\"tag\");\n    }\n    return selectors_to_get;\n}\n/**\n * Adds \"tag\" to a list, if it does not contain it. Used to modify selectors\n * list when includeTag option is enabled to make sure all results contain the\n * TAG part.\n */\nfunction addTagTypeIfNeeded(list) {\n    return list.includes(CSS_SELECTOR_TYPE.tag) ||\n        list.includes(CSS_SELECTOR_TYPE.nthoftype)\n        ? [...list]\n        : [...list, CSS_SELECTOR_TYPE.tag];\n}\n/**\n * Generates list of possible selector type combinations.\n */\nexport function combineSelectorTypes(options) {\n    const { selectors, combineBetweenSelectors, includeTag, maxCandidates } = options;\n    const combinations = combineBetweenSelectors\n        ? getPowerSet(selectors, { maxResults: maxCandidates })\n        : selectors.map((item) => [item]);\n    return includeTag ? combinations.map(addTagTypeIfNeeded) : combinations;\n}\n/**\n * Generates list of combined CSS selectors.\n */\nexport function getTypeCombinations(selectors_list, options) {\n    return combineSelectorTypes(options)\n        .map((item) => {\n        return constructSelectors(item, selectors_list);\n    })\n        .filter((item) => item.length > 0);\n}\n/**\n * Generates all variations of possible selectors from provided data.\n */\nexport function constructSelectors(selector_types, selectors_by_type) {\n    const data = {};\n    selector_types.forEach((selector_type) => {\n        const selector_variants = selectors_by_type[selector_type];\n        if (selector_variants && selector_variants.length > 0) {\n            data[selector_type] = selector_variants;\n        }\n    });\n    const combinations = getCartesianProduct(data);\n    return combinations.map(constructSelector);\n}\n/**\n * Creates selector for given selector type. Combines several parts if needed.\n */\nexport function constructSelectorType(selector_type, selectors_data) {\n    return selectors_data[selector_type]\n        ? selectors_data[selector_type].join(\"\")\n        : \"\";\n}\n/**\n * Converts selector data object to a selector.\n */\nexport function constructSelector(selectorData = {}) {\n    const pattern = [...SELECTOR_PATTERN];\n    // selector \"nthoftype\" already contains \"tag\"\n    if (selectorData[CSS_SELECTOR_TYPE.tag] &&\n        selectorData[CSS_SELECTOR_TYPE.nthoftype]) {\n        pattern.splice(pattern.indexOf(CSS_SELECTOR_TYPE.tag), 1);\n    }\n    return pattern\n        .map((type) => constructSelectorType(type, selectorData))\n        .join(\"\");\n}\n/**\n * Generates combinations of child and descendant selectors within root\n * selector.\n */\nfunction generateCandidateCombinations(selectors, rootSelector) {\n    return [\n        ...selectors.map((selector) => rootSelector + OPERATOR.DESCENDANT + selector),\n        ...selectors.map((selector) => rootSelector + OPERATOR.CHILD + selector),\n    ];\n}\n/**\n * Generates a list of selector candidates that can potentially match target\n * element.\n */\nfunction generateCandidates(selectors, rootSelector) {\n    return rootSelector === \"\"\n        ? selectors\n        : generateCandidateCombinations(selectors, rootSelector);\n}\n/**\n * Tries to find a unique CSS selector for element within given parent.\n */\nexport function getSelectorWithinRoot(elements, root, rootSelector = \"\", options) {\n    const elementSelectors = getAllSelectors(elements, root, options);\n    const selectorCandidates = generateCandidates(elementSelectors, rootSelector);\n    for (const candidateSelector of selectorCandidates) {\n        if (testSelector(elements, candidateSelector, root)) {\n            return candidateSelector;\n        }\n    }\n    return null;\n}\n/**\n * Climbs through parents of the element and tries to find the one that is\n * identifiable by unique CSS selector.\n */\nexport function getClosestIdentifiableParent(elements, root, rootSelector = \"\", options) {\n    if (elements.length === 0) {\n        return null;\n    }\n    const candidatesList = [\n        elements.length > 1 ? elements : [],\n        ...getParents(elements, root).map((element) => [element]),\n    ];\n    for (const currentElements of candidatesList) {\n        const result = getSelectorWithinRoot(currentElements, root, rootSelector, options);\n        if (result) {\n            return {\n                foundElements: currentElements,\n                selector: result,\n            };\n        }\n    }\n    return null;\n}\n/**\n * Converts input into list of elements, removing duplicates and non-elements.\n */\nexport function sanitizeSelectorNeedle(needle) {\n    if (needle instanceof NodeList || needle instanceof HTMLCollection) {\n        needle = Array.from(needle);\n    }\n    const elements = (Array.isArray(needle) ? needle : [needle]).filter(isElement);\n    return [...new Set(elements)];\n}\n//# sourceMappingURL=utilities-selectors.js.map","/**\n * Generates cartesian product out of input object.\n */\nexport function getCartesianProduct(input = {}) {\n    let result = [];\n    Object.entries(input).forEach(([key, values]) => {\n        result = values.flatMap((value) => {\n            if (result.length === 0) {\n                return [{ [key]: value }];\n            }\n            else {\n                return result.map((memo) => (Object.assign(Object.assign({}, memo), { [key]: value })));\n            }\n        });\n    });\n    return result;\n}\n//# sourceMappingURL=utilities-cartesian.js.map","import { CSS_SELECTOR_TYPE, OPERATOR, } from \"./types.js\";\nimport { SELECTOR_PATTERN } from \"./constants.js\";\nimport { getElementSelectorsByType } from \"./utilities-selectors.js\";\n/**\n * Creates data describing a specific selector.\n */\nexport function createElementSelectorData(selector) {\n    return {\n        value: selector,\n        include: false,\n    };\n}\n/**\n * Creates data describing an element within CssSelector chain.\n */\nexport function createElementData(element, selectorTypes, operator = OPERATOR.NONE) {\n    const selectors = {};\n    selectorTypes.forEach((selectorType) => {\n        Reflect.set(selectors, selectorType, getElementSelectorsByType(element, selectorType).map(createElementSelectorData));\n    });\n    return {\n        element,\n        operator,\n        selectors,\n    };\n}\n/**\n * Constructs selector from element data.\n */\nexport function constructElementSelector({ selectors, operator, }) {\n    let pattern = [...SELECTOR_PATTERN];\n    // `nthoftype` already contains tag\n    if (selectors[CSS_SELECTOR_TYPE.tag] &&\n        selectors[CSS_SELECTOR_TYPE.nthoftype]) {\n        pattern = pattern.filter((item) => item !== CSS_SELECTOR_TYPE.tag);\n    }\n    let selector = \"\";\n    pattern.forEach((selectorType) => {\n        var _a;\n        const selectorsOfType = (_a = selectors[selectorType]) !== null && _a !== void 0 ? _a : [];\n        selectorsOfType.forEach(({ value, include }) => {\n            if (include) {\n                selector += value;\n            }\n        });\n    });\n    return (operator + selector);\n}\n//# sourceMappingURL=utilities-element-data.js.map","import { getElementParents } from \"./utilities-dom.js\";\nimport { SELECTOR_SEPARATOR } from \"./constants.js\";\nimport { CSS_SELECTOR_TYPE, OPERATOR } from \"./types.js\";\nimport { constructElementSelector, createElementData, } from \"./utilities-element-data.js\";\n/**\n * Creates fallback selector for single element.\n */\nexport function getElementFallbackSelector(element) {\n    const parentElements = getElementParents(element).reverse();\n    const elementsData = parentElements.map((element) => {\n        const elementData = createElementData(element, [CSS_SELECTOR_TYPE.nthchild], OPERATOR.CHILD);\n        elementData.selectors.nthchild.forEach((selectorData) => {\n            selectorData.include = true;\n        });\n        return elementData;\n    });\n    return [\":root\", ...elementsData.map(constructElementSelector)].join(\"\");\n}\n/**\n * Creates chain of :nth-child selectors from root to the elements.\n */\nexport function getFallbackSelector(elements) {\n    return elements.map(getElementFallbackSelector).join(SELECTOR_SEPARATOR);\n}\n//# sourceMappingURL=selector-fallback.js.map","import { getFallbackSelector } from \"./selector-fallback.js\";\nimport { sanitizeOptions } from \"./utilities-options.js\";\nimport { getClosestIdentifiableParent, sanitizeSelectorNeedle, } from \"./utilities-selectors.js\";\nimport { getRootNode, testSelector } from \"./utilities-dom.js\";\nimport { SELECTOR_SEPARATOR } from \"./constants.js\";\n/**\n * Generates unique CSS selector for an element.\n */\nexport function getCssSelector(needle, custom_options = {}) {\n    var _a;\n    const elements = sanitizeSelectorNeedle(needle);\n    const options = sanitizeOptions(elements[0], custom_options);\n    const root = (_a = options.root) !== null && _a !== void 0 ? _a : getRootNode(elements[0]);\n    let partialSelector = \"\";\n    let currentRoot = root;\n    /**\n     * Utility function to make subsequent calls shorter.\n     */\n    function updateIdentifiableParent() {\n        return getClosestIdentifiableParent(elements, currentRoot, partialSelector, options);\n    }\n    let closestIdentifiableParent = updateIdentifiableParent();\n    while (closestIdentifiableParent) {\n        const { foundElements, selector } = closestIdentifiableParent;\n        if (testSelector(elements, selector, root)) {\n            return selector;\n        }\n        currentRoot = foundElements[0];\n        partialSelector = selector;\n        closestIdentifiableParent = updateIdentifiableParent();\n    }\n    // if failed to find single selector matching all elements, try to find\n    // selector for each standalone element and join them together\n    if (elements.length > 1) {\n        return elements\n            .map((element) => getCssSelector(element, options))\n            .join(SELECTOR_SEPARATOR);\n    }\n    return getFallbackSelector(elements);\n}\nexport default getCssSelector;\n//# sourceMappingURL=index.js.map","/**\n * Checks whether value is one of the enum's values.\n */\nexport function isEnumValue(haystack, needle) {\n    return Object.values(haystack).includes(needle);\n}\n//# sourceMappingURL=utilities-typescript.js.map"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","isElement","input","nodeType","Node","ELEMENT_NODE","OPERATOR","NONE","DESCENDANT","CHILD","CSS_SELECTOR_TYPE","id","class","tag","attribute","nthchild","nthoftype","libraryName","showWarning","args","console","warn","DEFAULT_OPTIONS","selectors","includeTag","whitelist","blacklist","combineWithinSelector","combineBetweenSelectors","maxCombinations","Number","POSITIVE_INFINITY","maxCandidates","isRegExp","RegExp","isCssSelectorMatch","includes","sanitizeCssSelectorMatchList","Array","isArray","filter","isParentNode","validParentNodeTypes","DOCUMENT_NODE","DOCUMENT_FRAGMENT_NODE","isNode","element","contains","rootNode","getRootNode","composed","document","sanitizeMaxNumber","getIntersection","items","firstItem","otherItems","length","reduce","accumulator","currentValue","item","flattenArray","concat","createPatternMatcher","list","matchFunctions","map","test","result","re","replace","some","matchFunction","testSelector","elements","selector","from","querySelectorAll","every","getElementParents","parent","push","parentElement","getParents","ownerDocument","querySelector","SELECTOR_SEPARATOR","INVALID_ID_RE","join","INVALID_CLASS_RE","SELECTOR_PATTERN","attributeBlacklistMatch","attributeNodeToSimplifiedSelector","name","attributeNodeToSelector","sanitizeAttributeData","nodeName","nodeValue","sanitizeSelectorItem","undefined","getElementAttributeSelectors","validAttributes","attributes","attributeNode","tagName","toLowerCase","startsWith","isValidAttributeNode","getElementClassSelectors","_a","getAttribute","trim","split","getElementIdSelectors","getElementNthChildSelector","parentNode","elementIndex","childNodes","indexOf","String","getElementTagSelectors","getTagSelector","Set","getElementNthOfTypeSelector","siblings","children","getPowerSet","maxResults","resultCounter","offsets","generateOffsets","offset","bumpOffsets","powerSetGenerator","maxValue","size","index","keys","ESCAPED_COLON","charCodeAt","toString","toUpperCase","SPECIAL_CHARACTERS_RE","CSS","escape","character","legacySanitizeSelectorItem","SELECTOR_TYPE_GETTERS","ELEMENT_SELECTOR_TYPE_GETTERS","addTagTypeIfNeeded","constructSelector","selectorData","pattern","splice","type","constructSelectorType","selectors_data","selector_type","getSelectorWithinRoot","rootSelector","options","selectorCandidates","generateCandidateCombinations","generateCandidates","selectors_list","matchBlacklist","matchWhitelist","selectors_to_get","getSelectorsToGet","data","selectors_by_type","getter","getSelectorsByType","filtered_selectors","filterSelectors","found_selectors","sort","a","b","a_is_whitelisted","b_is_whitelisted","orderSelectors","getSelectorsList","type_combinations","combinations","combineSelectorTypes","selector_types","forEach","selector_variants","entries","values","flatMap","memo","assign","getCartesianProduct","constructSelectors","getTypeCombinations","all_selectors","getAllSelectors","candidateSelector","createElementSelectorData","include","constructElementSelector","operator","selectorType","getElementFallbackSelector","reverse","elementData","selectorTypes","Reflect","set","getElementSelectorsByType","createElementData","getCssSelector","needle","custom_options","NodeList","HTMLCollection","sanitizeSelectorNeedle","isEnumValue","haystack","sanitizeOptions","partialSelector","currentRoot","updateIdentifiableParent","candidatesList","currentElements","foundElements","getClosestIdentifiableParent","closestIdentifiableParent","getFallbackSelector"],"sourceRoot":""}